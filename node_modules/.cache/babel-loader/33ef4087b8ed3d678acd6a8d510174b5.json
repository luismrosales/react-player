{"ast":null,"code":"var _jsxFileName = \"/Users/luisrosales/Documents/React/react-player/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\"; // Components\n\nimport Song from \"./components/Song\";\nimport Player from \"./components/Player\";\nimport Library from \"./components/Library\";\nimport Nav from \"./components/Nav\"; // Styles\n\nimport \"./styles/app.scss\";\nimport data from \"./data\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const timeUpdateHandler = e => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration; // CALCULATE PERCENTAGE\n\n    const roundedCurent = Math.round(current);\n    const roundedDuration = Math.round(duration);\n    const animation = Math.round(roundedCurent / roundedDuration * 100);\n    setSongInfo({ ...songInfo,\n      currentTime: current,\n      duration,\n      animationPercentage: animation\n    });\n  }; // STATE\n\n\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n    animationPercentage: 0\n  }); // REF\n\n  const audioRef = useRef(null); // state\n\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [libraryStatus, setLibraryStatus] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Nav, {\n      libraryStatus: libraryStatus,\n      setLibraryStatus: setLibraryStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Song, {\n      currentSong: currentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Player, {\n      setCurrentSong: setCurrentSong,\n      songs: songs,\n      setSongInfo: setSongInfo,\n      songInfo: songInfo,\n      audioRef: audioRef,\n      isPlaying: isPlaying,\n      setIsPlaying: setIsPlaying,\n      currentSong: currentSong,\n      setSongs: setSongs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Library, {\n      audioRef: audioRef,\n      songs: songs,\n      setCurrentSong: setCurrentSong,\n      isPlaying: isPlaying,\n      setSongs: setSongs,\n      libraryStatus: libraryStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      onLoadedMetadata: timeUpdateHandler,\n      onTimeUpdate: timeUpdateHandler,\n      ref: audioRef,\n      src: currentSong.audio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"zxO4fxrMns3ZHbe+DPgw4eApdwQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","Song","Player","Library","Nav","data","App","timeUpdateHandler","e","current","target","currentTime","duration","roundedCurent","Math","round","roundedDuration","animation","setSongInfo","songInfo","animationPercentage","audioRef","songs","setSongs","currentSong","setCurrentSong","isPlaying","setIsPlaying","libraryStatus","setLibraryStatus","audio"],"sources":["/Users/luisrosales/Documents/React/react-player/src/App.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\n// Components\nimport Song from \"./components/Song\";\nimport Player from \"./components/Player\";\nimport Library from \"./components/Library\";\nimport Nav from \"./components/Nav\";\n\n// Styles\nimport \"./styles/app.scss\";\nimport data from \"./data\";\n\nfunction App() {\n  const timeUpdateHandler = (e) => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n    // CALCULATE PERCENTAGE\n    const roundedCurent = Math.round(current);\n    const roundedDuration = Math.round(duration);\n    const animation = Math.round((roundedCurent / roundedDuration) * 100);\n    setSongInfo({\n      ...songInfo,\n      currentTime: current,\n      duration,\n      animationPercentage: animation,\n    });\n  };\n  // STATE\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n    animationPercentage: 0,\n  });\n  // REF\n  const audioRef = useRef(null);\n  // state\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  const [libraryStatus, setLibraryStatus] = useState(false);\n  return (\n    <div className=\"App\">\n      <Nav libraryStatus={libraryStatus} setLibraryStatus={setLibraryStatus} />\n      <Song currentSong={currentSong} />\n      <Player\n        setCurrentSong={setCurrentSong}\n        songs={songs}\n        setSongInfo={setSongInfo}\n        songInfo={songInfo}\n        audioRef={audioRef}\n        isPlaying={isPlaying}\n        setIsPlaying={setIsPlaying}\n        currentSong={currentSong}\n        setSongs={setSongs}\n      />\n      <Library\n        audioRef={audioRef}\n        songs={songs}\n        setCurrentSong={setCurrentSong}\n        isPlaying={isPlaying}\n        setSongs={setSongs}\n        libraryStatus={libraryStatus}\n      />\n      <audio\n        onLoadedMetadata={timeUpdateHandler}\n        onTimeUpdate={timeUpdateHandler}\n        ref={audioRef}\n        src={currentSong.audio}\n      ></audio>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC,C,CACA;;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,GAAP,MAAgB,kBAAhB,C,CAEA;;AACA,OAAO,mBAAP;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,SAASC,GAAT,GAAe;EAAA;;EACb,MAAMC,iBAAiB,GAAIC,CAAD,IAAO;IAC/B,MAAMC,OAAO,GAAGD,CAAC,CAACE,MAAF,CAASC,WAAzB;IACA,MAAMC,QAAQ,GAAGJ,CAAC,CAACE,MAAF,CAASE,QAA1B,CAF+B,CAG/B;;IACA,MAAMC,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWN,OAAX,CAAtB;IACA,MAAMO,eAAe,GAAGF,IAAI,CAACC,KAAL,CAAWH,QAAX,CAAxB;IACA,MAAMK,SAAS,GAAGH,IAAI,CAACC,KAAL,CAAYF,aAAa,GAAGG,eAAjB,GAAoC,GAA/C,CAAlB;IACAE,WAAW,CAAC,EACV,GAAGC,QADO;MAEVR,WAAW,EAAEF,OAFH;MAGVG,QAHU;MAIVQ,mBAAmB,EAAEH;IAJX,CAAD,CAAX;EAMD,CAbD,CADa,CAeb;;;EACA,MAAM,CAACE,QAAD,EAAWD,WAAX,IAA0BnB,QAAQ,CAAC;IACvCY,WAAW,EAAE,CAD0B;IAEvCC,QAAQ,EAAE,CAF6B;IAGvCQ,mBAAmB,EAAE;EAHkB,CAAD,CAAxC,CAhBa,CAqBb;;EACA,MAAMC,QAAQ,GAAGrB,MAAM,CAAC,IAAD,CAAvB,CAtBa,CAuBb;;EACA,MAAM,CAACsB,KAAD,EAAQC,QAAR,IAAoBxB,QAAQ,CAACM,IAAI,EAAL,CAAlC;EACA,MAAM,CAACmB,WAAD,EAAcC,cAAd,IAAgC1B,QAAQ,CAACuB,KAAK,CAAC,CAAD,CAAN,CAA9C;EACA,MAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4B5B,QAAQ,CAAC,KAAD,CAA1C;EAEA,MAAM,CAAC6B,aAAD,EAAgBC,gBAAhB,IAAoC9B,QAAQ,CAAC,KAAD,CAAlD;EACA,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,wBACE,QAAC,GAAD;MAAK,aAAa,EAAE6B,aAApB;MAAmC,gBAAgB,EAAEC;IAArD;MAAA;MAAA;MAAA;IAAA,QADF,eAEE,QAAC,IAAD;MAAM,WAAW,EAAEL;IAAnB;MAAA;MAAA;MAAA;IAAA,QAFF,eAGE,QAAC,MAAD;MACE,cAAc,EAAEC,cADlB;MAEE,KAAK,EAAEH,KAFT;MAGE,WAAW,EAAEJ,WAHf;MAIE,QAAQ,EAAEC,QAJZ;MAKE,QAAQ,EAAEE,QALZ;MAME,SAAS,EAAEK,SANb;MAOE,YAAY,EAAEC,YAPhB;MAQE,WAAW,EAAEH,WARf;MASE,QAAQ,EAAED;IATZ;MAAA;MAAA;MAAA;IAAA,QAHF,eAcE,QAAC,OAAD;MACE,QAAQ,EAAEF,QADZ;MAEE,KAAK,EAAEC,KAFT;MAGE,cAAc,EAAEG,cAHlB;MAIE,SAAS,EAAEC,SAJb;MAKE,QAAQ,EAAEH,QALZ;MAME,aAAa,EAAEK;IANjB;MAAA;MAAA;MAAA;IAAA,QAdF,eAsBE;MACE,gBAAgB,EAAErB,iBADpB;MAEE,YAAY,EAAEA,iBAFhB;MAGE,GAAG,EAAEc,QAHP;MAIE,GAAG,EAAEG,WAAW,CAACM;IAJnB;MAAA;MAAA;MAAA;IAAA,QAtBF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AA+BD;;GA5DQxB,G;;KAAAA,G;AA8DT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}